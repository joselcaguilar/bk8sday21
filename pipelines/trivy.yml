trigger:
- develop
- main

pool:
  vmImage: ubuntu-latest

variables:
  imageName: python
  trivyVersion: 0.20.1

stages:
- stage: Build
  displayName: Build, Scan and Push image
  jobs:
  - job: Build
    displayName: Build, Scan and Push
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: CmdLine@2
      displayName: Build the Python v3.4 image
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/dockerFiles
        script: |
            docker build -t $(imageName):3.4-$(Build.BuildNumber) -f dockerFileOld .

    - task: CmdLine@2
      displayName: Build the latest Python image
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/dockerFiles
        script: |
            docker build -t $(imageName):latest-$(Build.BuildNumber) -f dockerFile .

    - task: CmdLine@2
      displayName: "Run trivy scan for Python 3.4 image"
      inputs:
        script: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/aquasecurity/trivy:$(trivyVersion) image $(imageName):3.4-$(Build.BuildNumber)

    - task: CmdLine@2
      displayName: "Run trivy scan for latest Python image"
      inputs:
        script: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/aquasecurity/trivy:$(trivyVersion) image $(imageName):latest-$(Build.BuildNumber)
            
    - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit-report-low-med.xml'
          mergeTestResults: true
          failTaskOnFailedTests: false
          testRunTitle: 'Trivy - Low and Medium Vulnerabilities'
        condition: 'always()'   

    - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit-report-high-crit.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Trivy - High and Critical Vulnerabilities'
        condition: 'always()' 
